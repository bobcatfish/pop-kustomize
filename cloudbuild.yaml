# Overview: build and create a release via Google Cloud Deploy for GKE
steps:
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '.', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/pop-stats/pop-stats', '-f', 'Dockerfile']
    dir: 'app'
  # Run api tests
  - name: 'us-central1-docker.pkg.dev/$PROJECT_ID/pop-stats/pop-stats'
    entrypoint: python
    args: ["api_tests.py"]
    dir: 'app'
  # Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/pop-stats/pop-stats']
  # Create release in Google Cloud Deploy using the digest of the newly built image
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
    - -c
    - |
      set -ex
      gcloud artifacts docker images describe \
        'us-central1-docker.pkg.dev/$PROJECT_ID/pop-stats/pop-stats' \
        --format 'value(image_summary.digest)' > digest
      gcloud deploy releases create rel-${SHORT_SHA} \
        --delivery-pipeline pop-stats-pipeline \
        --region us-central1 \
        --annotations commitId=${REVISION_ID} \
        --images pop-stats=us-central1-docker.pkg.dev/$PROJECT_ID/pop-stats/pop-stats@$(cat digest)
      while :
      do
        STATE=$(gcloud deploy rollouts describe rel-${SHORT_SHA}-to-test-0001 \
        --delivery-pipeline pop-stats-pipeline \
        --region us-central1 \
        --release rel-${SHORT_SHA} \
        --format 'value(state)')
       if [[ "$$STATE" == "FAILED" ]]; then
        exit 1
       elif [[ "$$STATE" == "SUCCEEDED" ]]; then
        exit 0
        sleep 5
       fi
      done
images:
- us-central1-docker.pkg.dev/$PROJECT_ID/pop-stats/pop-stats
options:
  requestedVerifyOption: VERIFIED
    
